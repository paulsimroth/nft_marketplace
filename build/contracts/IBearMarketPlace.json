{
  "contractName": "IBearMarketPlace",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "TxType",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "MarketTransaction",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bearContractAddress",
          "type": "address"
        }
      ],
      "name": "setBearContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getOffer",
      "outputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllTokenOnSale",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "listOfOffers",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "setOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "removeOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "buyBear",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"TxType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"MarketTransaction\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buyBear\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTokenOnSale\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"listOfOffers\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getOffer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"removeOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bearContractAddress\",\"type\":\"address\"}],\"name\":\"setBearContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"setOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"buyBear(uint256)\":{\"notice\":\"Executes the purchase of _tokenId. Sends the funds to the seller and transfers the token using transferFrom in Kittycontract. Emits the MarketTransaction event with txType \\\"Buy\\\". Requirement: The msg.value needs to equal the price of _tokenId Requirement: There must be an active offer for _tokenId\"},\"getAllTokenOnSale()\":{\"notice\":\"Get all tokenId's that are currently for sale. Returns an empty arror if none exist.\"},\"getOffer(uint256)\":{\"notice\":\"Get the details about a offer for _tokenId. Throws an error if there is no active offer for _tokenId.\"},\"removeOffer(uint256)\":{\"notice\":\"Removes an existing offer. Emits the MarketTransaction event with txType \\\"Remove offer\\\" Requirement: Only the seller of _tokenId can remove an offer.\"},\"setBearContract(address)\":{\"notice\":\"Set the current KittyContract address and initialize the instance of Kittycontract. Requirement: Only the contract owner can call.\"},\"setOffer(uint256,uint256)\":{\"notice\":\"Creates a new offer for _tokenId for the price _price. Emits the MarketTransaction event with txType \\\"Create offer\\\" Requirement: Only the owner of _tokenId can create an offer. Requirement: There can only be one active offer for a token at a time. Requirement: Marketplace contract (this) needs to be an approved operator when the offer is created.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/IBearMarketplace.sol\":\"IBearMarketPlace\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/contracts/Bearcontract.sol\":{\"keccak256\":\"0xafc7d5d58cbc43c17860d1373d37f4a1ad5e45f8bc22e674c87e8080ccf99d7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d64ebadc9958f6ccc1861fb3616b4a060f39379a155f709d584117fb61b3133e\",\"dweb:/ipfs/QmPmH8zkbPyr7B6bD5owid9JNybScGHoKWjtMcNZ2cAcio\"]},\"project:/contracts/IBearMarketplace.sol\":{\"keccak256\":\"0x0b93d66f00710adae1966cc2de84412559b6cfb9d5066ea8e69dcb25b25e9a77\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb14a5ef9f4a3e768764d9b1a604da326e1f67e79a64f48e74af6ede14a79d14\",\"dweb:/ipfs/QmR2YoWyJgbKJXEduB9GmzShmSEANUTPLoVrDLJgSAYBBQ\"]},\"project:/contracts/IERC721.sol\":{\"keccak256\":\"0x05bfadd6fa7f08cdce55ca7a65f135a612099322788b7df71834218b21d2b529\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b00ead7ae4c7974ad5a260c5d038ac9be89f5ebb164f7bb8d2d592afcf586ccd\",\"dweb:/ipfs/QmZ8JhNB4jy2sw2JGuwSYohczsftYnZStVSpqhfmu6DuHL\"]},\"project:/contracts/IERC721Receiver.sol\":{\"keccak256\":\"0x7a7aa03b484ac360471ff63e00dd59aa5338111961e40fbb8f127a277e17d68d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c133577672ae564298abf38f13d4bf65d7b21262a356804437d9129935ca1454\",\"dweb:/ipfs/QmYBvBsJVgD9WtNrb1YnEAdFLS4KrBcRZbAfizQYikpiZv\"]},\"project:/contracts/Ownable.sol\":{\"keccak256\":\"0xc926c8d9efcab9e148234b8f3e140d4c7a26e439307ef2bc2ec63b25394e92d5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6bb52eb914a1f246950d65f3cbef2b3e5bbfda27e97190474029a06762846e98\",\"dweb:/ipfs/QmVhPLFPivUnS6UDxM4ZuJotsfEyzEGVmt8sqSXCG22LU1\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.16;\r\n\r\nimport \"./Bearcontract.sol\";\r\nimport \"./Ownable.sol\";\r\n\r\n/*\r\n * Market place to trade kitties (should **in theory** be used for any ERC721 token)\r\n * It needs an existing Kitty contract to interact with\r\n * Note: it does not inherit from the kitty contracts\r\n * Note: The contract needs to be an operator for everyone who is selling through this contract.\r\n */\r\ninterface IBearMarketPlace {\r\n\r\n    event MarketTransaction(string TxType, address owner, uint256 tokenId);\r\n\r\n    /**\r\n    * Set the current KittyContract address and initialize the instance of Kittycontract.\r\n    * Requirement: Only the contract owner can call.\r\n     */\r\n    function setBearContract(address _bearContractAddress) external;\r\n\r\n    /**\r\n    * Get the details about a offer for _tokenId. Throws an error if there is no active offer for _tokenId.\r\n     */\r\n    function getOffer(uint256 _tokenId) external view returns ( address seller, uint256 price, uint256 index, uint256 tokenId, bool active);\r\n\r\n    /**\r\n    * Get all tokenId's that are currently for sale. Returns an empty arror if none exist.\r\n     */\r\n    function getAllTokenOnSale() external view  returns(uint256[] memory listOfOffers);\r\n\r\n    /**\r\n    * Creates a new offer for _tokenId for the price _price.\r\n    * Emits the MarketTransaction event with txType \"Create offer\"\r\n    * Requirement: Only the owner of _tokenId can create an offer.\r\n    * Requirement: There can only be one active offer for a token at a time.\r\n    * Requirement: Marketplace contract (this) needs to be an approved operator when the offer is created.\r\n     */\r\n    function setOffer(uint256 _price, uint256 _tokenId) external;\r\n\r\n    /**\r\n    * Removes an existing offer.\r\n    * Emits the MarketTransaction event with txType \"Remove offer\"\r\n    * Requirement: Only the seller of _tokenId can remove an offer.\r\n     */\r\n    function removeOffer(uint256 _tokenId) external;\r\n\r\n    /**\r\n    * Executes the purchase of _tokenId.\r\n    * Sends the funds to the seller and transfers the token using transferFrom in Kittycontract.\r\n    * Emits the MarketTransaction event with txType \"Buy\".\r\n    * Requirement: The msg.value needs to equal the price of _tokenId\r\n    * Requirement: There must be an active offer for _tokenId\r\n     */\r\n    function buyBear(uint256 _tokenId) external payable;\r\n}\r\n",
  "sourcePath": "C:\\Users\\Admin\\Webdev\\nft_marketplace\\academy-kitties-template\\contracts\\IBearMarketplace.sol",
  "ast": {
    "absolutePath": "project:/contracts/IBearMarketplace.sol",
    "exportedSymbols": {
      "Bearcontract": [
        1496
      ],
      "IBearMarketPlace": [
        1620
      ],
      "IERC721": [
        1755
      ],
      "IERC721Receiver": [
        1772
      ],
      "Ownable": [
        1833
      ]
    },
    "id": 1621,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1560,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".16"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:24:3"
      },
      {
        "absolutePath": "project:/contracts/Bearcontract.sol",
        "file": "./Bearcontract.sol",
        "id": 1561,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1621,
        "sourceUnit": 1497,
        "src": "61:28:3",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/Ownable.sol",
        "file": "./Ownable.sol",
        "id": 1562,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1621,
        "sourceUnit": 1834,
        "src": "91:23:3",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IBearMarketPlace",
        "contractDependencies": [],
        "contractKind": "interface",
        "fullyImplemented": false,
        "id": 1620,
        "linearizedBaseContracts": [
          1620
        ],
        "name": "IBearMarketPlace",
        "nameLocation": "433:16:3",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "anonymous": false,
            "eventSelector": "d99e4fad9ad6313b1feb588fa8e605e3a9873172f2024330c35dd2b4041a4386",
            "id": 1570,
            "name": "MarketTransaction",
            "nameLocation": "465:17:3",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1569,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1564,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "TxType",
                  "nameLocation": "490:6:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1570,
                  "src": "483:13:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1563,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "483:6:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1566,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "owner",
                  "nameLocation": "506:5:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1570,
                  "src": "498:13:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1565,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "498:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1568,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "521:7:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1570,
                  "src": "513:15:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1567,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "513:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "482:47:3"
            },
            "src": "459:71:3"
          },
          {
            "documentation": {
              "id": 1571,
              "nodeType": "StructuredDocumentation",
              "src": "538:157:3",
              "text": " Set the current KittyContract address and initialize the instance of Kittycontract.\n Requirement: Only the contract owner can call."
            },
            "functionSelector": "45b98e32",
            "id": 1576,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setBearContract",
            "nameLocation": "710:15:3",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1574,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1573,
                  "mutability": "mutable",
                  "name": "_bearContractAddress",
                  "nameLocation": "734:20:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1576,
                  "src": "726:28:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1572,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "726:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "725:30:3"
            },
            "returnParameters": {
              "id": 1575,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "764:0:3"
            },
            "scope": 1620,
            "src": "701:64:3",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1577,
              "nodeType": "StructuredDocumentation",
              "src": "773:121:3",
              "text": " Get the details about a offer for _tokenId. Throws an error if there is no active offer for _tokenId."
            },
            "functionSelector": "4579268a",
            "id": 1592,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getOffer",
            "nameLocation": "909:8:3",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1580,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1579,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "926:8:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1592,
                  "src": "918:16:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1578,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "918:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "917:18:3"
            },
            "returnParameters": {
              "id": 1591,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1582,
                  "mutability": "mutable",
                  "name": "seller",
                  "nameLocation": "968:6:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1592,
                  "src": "960:14:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1581,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "960:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1584,
                  "mutability": "mutable",
                  "name": "price",
                  "nameLocation": "984:5:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1592,
                  "src": "976:13:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1583,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "976:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1586,
                  "mutability": "mutable",
                  "name": "index",
                  "nameLocation": "999:5:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1592,
                  "src": "991:13:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1585,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "991:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1588,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "1014:7:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1592,
                  "src": "1006:15:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1587,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1006:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1590,
                  "mutability": "mutable",
                  "name": "active",
                  "nameLocation": "1028:6:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1592,
                  "src": "1023:11:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1589,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1023:4:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "958:77:3"
            },
            "scope": 1620,
            "src": "900:136:3",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1593,
              "nodeType": "StructuredDocumentation",
              "src": "1044:104:3",
              "text": " Get all tokenId's that are currently for sale. Returns an empty arror if none exist."
            },
            "functionSelector": "49b3709f",
            "id": 1599,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getAllTokenOnSale",
            "nameLocation": "1163:17:3",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1594,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1180:2:3"
            },
            "returnParameters": {
              "id": 1598,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1597,
                  "mutability": "mutable",
                  "name": "listOfOffers",
                  "nameLocation": "1223:12:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1599,
                  "src": "1206:29:3",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 1595,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "1206:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 1596,
                    "nodeType": "ArrayTypeName",
                    "src": "1206:9:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1205:31:3"
            },
            "scope": 1620,
            "src": "1154:83:3",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1600,
              "nodeType": "StructuredDocumentation",
              "src": "1245:396:3",
              "text": " Creates a new offer for _tokenId for the price _price.\n Emits the MarketTransaction event with txType \"Create offer\"\n Requirement: Only the owner of _tokenId can create an offer.\n Requirement: There can only be one active offer for a token at a time.\n Requirement: Marketplace contract (this) needs to be an approved operator when the offer is created."
            },
            "functionSelector": "941b055b",
            "id": 1607,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setOffer",
            "nameLocation": "1656:8:3",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1605,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1602,
                  "mutability": "mutable",
                  "name": "_price",
                  "nameLocation": "1673:6:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1607,
                  "src": "1665:14:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1601,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1665:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1604,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "1689:8:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1607,
                  "src": "1681:16:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1603,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1681:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1664:34:3"
            },
            "returnParameters": {
              "id": 1606,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1707:0:3"
            },
            "scope": 1620,
            "src": "1647:61:3",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1608,
              "nodeType": "StructuredDocumentation",
              "src": "1716:183:3",
              "text": " Removes an existing offer.\n Emits the MarketTransaction event with txType \"Remove offer\"\n Requirement: Only the seller of _tokenId can remove an offer."
            },
            "functionSelector": "95a0f9c7",
            "id": 1613,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "removeOffer",
            "nameLocation": "1914:11:3",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1611,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1610,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "1934:8:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1613,
                  "src": "1926:16:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1609,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1926:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1925:18:3"
            },
            "returnParameters": {
              "id": 1612,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1952:0:3"
            },
            "scope": 1620,
            "src": "1905:48:3",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 1614,
              "nodeType": "StructuredDocumentation",
              "src": "1961:346:3",
              "text": " Executes the purchase of _tokenId.\n Sends the funds to the seller and transfers the token using transferFrom in Kittycontract.\n Emits the MarketTransaction event with txType \"Buy\".\n Requirement: The msg.value needs to equal the price of _tokenId\n Requirement: There must be an active offer for _tokenId"
            },
            "functionSelector": "70e8c5ea",
            "id": 1619,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "buyBear",
            "nameLocation": "2322:7:3",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1617,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1616,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "2338:8:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 1619,
                  "src": "2330:16:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1615,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2330:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2329:18:3"
            },
            "returnParameters": {
              "id": 1618,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2364:0:3"
            },
            "scope": 1620,
            "src": "2313:52:3",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 1621,
        "src": "423:1945:3",
        "usedErrors": []
      }
    ],
    "src": "33:2337:3"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.16+commit.07a7930e.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.7",
  "updatedAt": "2022-10-17T09:15:19.738Z",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "buyBear(uint256)": {
        "notice": "Executes the purchase of _tokenId. Sends the funds to the seller and transfers the token using transferFrom in Kittycontract. Emits the MarketTransaction event with txType \"Buy\". Requirement: The msg.value needs to equal the price of _tokenId Requirement: There must be an active offer for _tokenId"
      },
      "getAllTokenOnSale()": {
        "notice": "Get all tokenId's that are currently for sale. Returns an empty arror if none exist."
      },
      "getOffer(uint256)": {
        "notice": "Get the details about a offer for _tokenId. Throws an error if there is no active offer for _tokenId."
      },
      "removeOffer(uint256)": {
        "notice": "Removes an existing offer. Emits the MarketTransaction event with txType \"Remove offer\" Requirement: Only the seller of _tokenId can remove an offer."
      },
      "setBearContract(address)": {
        "notice": "Set the current KittyContract address and initialize the instance of Kittycontract. Requirement: Only the contract owner can call."
      },
      "setOffer(uint256,uint256)": {
        "notice": "Creates a new offer for _tokenId for the price _price. Emits the MarketTransaction event with txType \"Create offer\" Requirement: Only the owner of _tokenId can create an offer. Requirement: There can only be one active offer for a token at a time. Requirement: Marketplace contract (this) needs to be an approved operator when the offer is created."
      }
    },
    "version": 1
  }
}